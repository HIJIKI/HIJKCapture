//--------------------------------------------------------------------------------------------------
//= SubRoutine.hsp
//--------------------------------------------------------------------------------------------------
//	サブルーチン
//--------------------------------------------------------------------------------------------------

	#include "module/SaveLoad.hsp"

	//----------------------------------------------------------------------------------------------
	//= 終了処理
	//----------------------------------------------------------------------------------------------
		*__end
			end

	//----------------------------------------------------------------------------------------------
	//= 範囲選択ループから編集ループへ移る際の引継ぎ処理
	//----------------------------------------------------------------------------------------------
		*__SelectToEdit
			//マウスカーソルを元に戻す
			SetSystemCursor IDC_ARROW
			//キャプチャサイズが0x0にならないために修正
			if( CaptureSizeW < 1 ){ CaptureSizeW = 1 }
			if( CaptureSizeH < 1 ){ CaptureSizeH = 1 }
			//スクリーンショット撮影
			buffer SCR_SSBUF, CaptureSizeW, CaptureSizeH
			GetScreenShot CapturePosX, CapturePosY, CaptureSizeW, CaptureSizeH, 0
			//ペンバッファ初期化
			buffer SCR_PENBUF, CaptureSizeW, CaptureSizeH
			COLSET_ALPHA:boxf
			//編集ウィンドウを表示
			gsel SCR_EDIT, 1
			//編集画面用変数を初期化
			EditPenSize = 5
			EditColor = 0
			if( CaptureSizeW < EDITWINDOW_SIZE_W ){
				EditPosX = ginfo_winx/2-CaptureSizeW/2
			} else {
				EditPosX = 64
			}
			if( CaptureSizeH < EDITWINDOW_SIZE_H ){
				EditPosY = ginfo_winy/2-CaptureSizeH/2
			} else {
				EditPosY = 64
			}
			//パレットボタン設置
			syscolor 4	: bg = ginfo_r, ginfo_g, ginfo_b
			margin = 2
			w = PALETTEBAR_SIZE_H-margin*2	: h = w
			x = PALETTEBAR_POS_X+margin		: y = PALETTEBAR_POS_Y+margin
			foreach EditPaletteTable
				c = RefToR(EditPaletteTable(cnt)), RefToG(EditPaletteTable(cnt)), RefToB(EditPaletteTable(cnt))
				mgButtonColor bg, c, c, c
				mgButton "■", *__PaletteButton, x+(w+margin)*cnt, y, w, h, 1
				PaletteButtonID(cnt) = stat
			loop
			//全消しボタン設置
			x = (PALETTEBAR_POS_X+margin)+(PALETTEBAR_SIZE_H-margin)*length(EditPaletteTable)
			y = PALETTEBAR_POS_Y+margin
			w = PALETTEBAR_SIZE_H-margin*2	: h = w
			mgButtonColor bg, bg, bg, bg
			mgButton "", *__ClearButton, x, y, w, h, 1, SCR_BUTTONICON, 0
		return

	//----------------------------------------------------------------------------------------------
	//= パレットボタン
	//----------------------------------------------------------------------------------------------
		*__PaletteButton
			foreach PaletteButtonID
				if( PaletteButtonID(cnt) == stat ){
					id = cnt
					break
				}
			loop
			EditPenColor = EditPaletteTable(id)
		return

	//----------------------------------------------------------------------------------------------
	//= 全消しボタン
	//----------------------------------------------------------------------------------------------
		*__ClearButton
			gsel SCR_PENBUF
			COLSET_ALPHA
			boxf
			gsel SCR_EDIT
		return

	//----------------------------------------------------------------------------------------------
	//= 保存画像バッファ作成
	//----------------------------------------------------------------------------------------------
		*__MakeSaveBuffer
			buffer SCR_SAVEBUF, CaptureSizeW, CaptureSizeH
			gmode 0
			pos 0, 0
			gcopy SCR_SSBUF, 0, 0, CaptureSizeW, CaptureSizeH
			COLSET_ALPHA
			gmode 4, , , 256
			pos 0, 0
			gcopy SCR_PENBUF, 0, 0, CaptureSizeW, CaptureSizeH
		return

	//----------------------------------------------------------------------------------------------
	//= サムネイルバッファ作成
	//----------------------------------------------------------------------------------------------
		*__MakeThumbnailBuffer
			//画像の中心を正方形で抜き出す
			if( CaptureSizeW <= CaptureSizeH ){
				size = CaptureSizeW
			} else {
				size = CaptureSizeH
			}
			buffer SCR_THUMBNAILBUF1, size, size
			x = size/2-CaptureSizeW/2
			y = size/2-CaptureSizeH/2
			gmode 0, CaptureSizeW, CaptureSizeH
			pos x, y
			gcopy SCR_SAVEBUF
			//サムネイルを作成
			buffer SCR_THUMBNAILBUF2, THUMBNAIL_SIZE_WH, THUMBNAIL_SIZE_WH
			pos 0, 0
			gzoom THUMBNAIL_SIZE_WH, THUMBNAIL_SIZE_WH, SCR_THUMBNAILBUF1, 0, 0, size, size, 1
		return

	//----------------------------------------------------------------------------------------------
	//= アップロードボタン
	//----------------------------------------------------------------------------------------------
		*__Upload
			gosub *__MakeSaveBuffer
			pngsave TMP_IMAGE
			gosub *__MakeThumbnailBuffer
			pngsave TMP_THUMBNAIL
			gosub *__UploadStart
			if( stat == 0 ){
				end
			}
		return

	//----------------------------------------------------------------------------------------------
	//= アップロード処理
	//----------------------------------------------------------------------------------------------
		*__UploadStart
			//FTPサーバーへ接続
			ftpopen ""+FtpHost, ""+USERNAME_HEADER+FtpUserName, ""+FtpPassword
			if( stat != 0 ){
				msg = {"データベースサーバーへのログインに失敗しました。
				ユーザー名またはパスワードが間違っている可能性があります。
				(ユーザー名/パスワードが正しいことを確認した上で
				長期的にこの問題が解決しない場合は管理者へ知らせてください。)"}
				dialog ""+msg, 1, "エラー"
			}
			//count.txtを取得
			ftpget "count.txt", ""+TMP_CNT, 1
			tmp = "":notesel tmp
			noteload ""+TMP_CNT
			c = int(tmp)
			//アップロードパスを生成
			pathImage = ""+c+".png"
			pathThumb = "./t/"+c+".png"
			//countをインクリメントし保存
			c++
			noteadd ""+c, 0, 1
			notesave ""+TMP_CNT
			//アップロード
			f = 0
			ftpput ""+TMP_IMAGE, ""+pathImage, 0		:f += stat
			ftpput ""+TMP_THUMBNAIL, ""+pathThumb, 0	:f += stat
			ftpput ""+TMP_CNT, "count.txt", 1			:f += stat
			if( f == 0){
				tmp = "http://"+FtpHost+"/hijkcapture/"+FtpUserName+"/"+pathImage
				clipset ""+tmp
				exec ""+tmp, 16
			} else {
				dialog "アップロードに失敗しました。", 1, "エラー"
			}
			//サーバーから切断する
			ftpclose
		return f

	//----------------------------------------------------------------------------------------------
	//= ローカルへ保存ボタン
	//----------------------------------------------------------------------------------------------
		*__LocalSave
			dialog "png",17,"PNG"
			if( stat == 1 ){
				savepath = ""+getpath(refstr, 1)+".png"
				gosub *__MakeSaveBuffer
				pngsave ""+savepath
				goto *__end
			}
		return

	//----------------------------------------------------------------------------------------------
	//= キャンセルボタン
	//----------------------------------------------------------------------------------------------
		*__Cancel
			goto *__end
		return

	//----------------------------------------------------------------------------------------------
	//= 範囲選択中の操作方法ウィンドウ内容描画
	//----------------------------------------------------------------------------------------------
		*__SelectHelpDraw
			color				:boxf
			color 255,255,196	:boxf 1, 1, SELECTHELP_SIZE_W-2, SELECTHELP_SIZE_H-2
			color				:font msgothic, 12	:pos 8, 8
			mes "Ctrl+ドラッグで選択範囲をキャプチャ"
			mes "ESCキーでソフトウェアを終了"
		return

	//----------------------------------------------------------------------------------------------
	//= マウスが編集画面有効範囲内にあるかを判別
	//----------------------------------------------------------------------------------------------
		#defcfunc MouseEditRange
			ret = 0
			if( MousePosX() >= 0 ){
				if( MousePosX() <= EDITWINDOW_SIZE_W ){
					if( MousePosY() >= 0+PALETTEBAR_SIZE_H ){
						if( MousePosY() <= EDITWINDOW_SIZE_H-CTRLBAR_SIZE_H ){
							ret = 1
						}
					}
				}
			}
		return ret